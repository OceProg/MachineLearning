import scala.io.Source
import scala.math._
import scala.util.control.Breaks._
import java.io._
import smile._
import smile.data._
import smile.shell._
import smile.classification._
import javax.swing.JFrame
import javax.swing.JPanel
import smile.plot.BarPlot
import smile.plot.Palette
import scala.io.Source
import smile.plot.ScatterPlot

object ml_tp1_main {

  def printToFile(f: java.io.File)(op: java.io.PrintWriter => Unit) {
    val p = new java.io.PrintWriter(f)
    try { op(p) } finally { p.close() }
  }

  def csvCleaner(f: java.io.File): List[String] = {
    val csv = Source.fromFile(f) //.drop(1)
    val csv_clean = csv.getLines().toList map {
      _.replaceAll("%", "")
    } map {
      _.replaceAll("\"", "")
    } map {
      _.replaceAll("months", "")
    } map { _.replaceAll(",NA", ",0") }
    return csv_clean
  }

  def scatterPlotMultiple(l: List[String]): Unit = {
    val line = l.drop(1).map { c => c.split(",").toList }
    val M = line.map { y => y.map { x => x.toDouble }.toArray }
    M.map { x =>
      M.map { y =>
        var data: Array[Array[Double]] = new Array[Array[Double]](2)
        if (y != x) {
          data(0) = x
          data(1) = y
        }
        val scatplot = smile.plot.ScatterPlot.plot(data.transpose, '.')

    scatplot.setTitleColor(Palette.RED)
    val framesc = new JFrame("Scatterplot");
    framesc.setLocationRelativeTo(null)
    framesc.setLocationRelativeTo(null);
    framesc.getContentPane().add(scatplot);
    framesc.setSize(800, 500);
    framesc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    framesc.setVisible(true)
        

      }
    }
  }

  def main(args: Array[String]): Unit = {
    val path = "/home/user14/Documents/MachineLearning/DataTP/"
    val file_name1 = "loansData.csv"
    val csv_clean1 = csvCleaner(new File(path + file_name1))

    val file_name2 = "loanf.csv"
    val csv_clean2 = csvCleaner(new File(path + file_name2))
    //csv_clean1.foreach { x => println(x) }

    //    val line = csv_clean1.drop(1).map { c => c.split(",").toList }
    //    val tabplot = line.map { x => x(2).toDouble }.toArray
    //
    //    print(tabplot)
    //
    //    val bar = smile.plot.BoxPlot.plot(tabplot)
    //
    //    bar.setTitleColor(Palette.RED)

    //    val frame = new JFrame("Box Plot");
    //
    //    frame.setLocationRelativeTo(null)
    //    frame.setLocationRelativeTo(null);
    //    frame.getContentPane().add(bar);
    //    frame.setSize(1000, 500);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //    frame.setVisible(true)

    val line1 = csv_clean1.drop(1).map { c => c.split(",").toList }
    val tab11 = line1.map { x => x(1).toDouble }.toArray
    val tab12 = line1.map { x => x(2).toDouble }.toArray
    val line2 = csv_clean2.drop(1).map { c => c.split(",").toList }
    val tab21 = line2.map { x => x(2).toDouble }.toArray
    var data: Array[Array[Double]] = new Array[Array[Double]](2)
    data(0) = tab11
    data(1) = tab12

    //    val data = Array.ofDim[Double](2, 2)
    //    //data(0)(0) = 3
    //    for (j <- Range(0, 1)) {
    //      for (i <- Range(0, 1)) {
    //        data(i)(j) = 10
    //      }
    //    }

    val scatplot = smile.plot.ScatterPlot.plot(data.transpose, '.')

    scatplot.setTitleColor(Palette.RED)
    val framesc = new JFrame("Scatterplot");
    framesc.setLocationRelativeTo(null)
    framesc.setLocationRelativeTo(null);
    framesc.getContentPane().add(scatplot);
    framesc.setSize(800, 500);
    framesc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    framesc.setVisible(true)

    //    val bar = smile.plot.BoxPlot.plot(data)
    //    bar.setTitleColor(Palette.RED)
    //    val frame = new JFrame("Box Plot");
    //    frame.setLocationRelativeTo(null)
    //    frame.setLocationRelativeTo(null);
    //    frame.getContentPane().add(bar);
    //    frame.setSize(1000, 500);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //    frame.setVisible(true)

    //    printToFile(new File("/home/user14/Documents/MachineLearning/TP1/ml_tp1/cleaned_"+file_name)) { p =>
    //      csv_clean1.drop(1).foreach(p.println)
    //    }

  }
}